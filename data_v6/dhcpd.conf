# Sample configuration file for ISC dhcpd
#

# option definitions common to all supported networks...
option domain-name "elliot_lin.org";
option domain-name-servers ns1.example.org, ns2.example.org;

#default-lease-time 600;
default-lease-time 3600;
max-lease-time 7200;

# Use this to enble / disable dynamic dns updates globally.
#ddns-update-style none;

# If this DHCP server is the official DHCP server for the local
# network, the authoritative directive should be uncommented.
#authoritative;

# Use this to send dhcp log messages to a different log file (you also
# have to hack syslog.conf to complete the redirection).
log-facility local7;

# No service will be given on this subnet, but declaring it helps the
# DHCP server to understand the network topology.

#subnet 10.152.187.0 netmask 255.255.255.0 {
#}

# This is a very basic subnet declaration.

#subnet 10.254.239.0 netmask 255.255.255.224 {
#  range 10.254.239.10 10.254.239.20;
#  option routers rtr-239-0-1.example.org, rtr-239-0-2.example.org;
#}

# This declaration allows BOOTP clients to get dynamic addresses,
# which we don't really recommend.

#subnet 10.254.239.32 netmask 255.255.255.224 {
#  range dynamic-bootp 10.254.239.40 10.254.239.60;
#  option broadcast-address 10.254.239.31;
#  option routers rtr-239-32-1.example.org;
#}

# A slightly different configuration for an internal subnet.
#subnet 10.5.5.0 netmask 255.255.255.224 {
#  range 10.5.5.26 10.5.5.30;
#  option domain-name-servers ns1.internal.example.org;
#  option domain-name "internal.example.org";
#  option routers 10.5.5.1;
#  option broadcast-address 10.5.5.31;
#  default-lease-time 600;
#  max-lease-time 7200;
#}

# Hosts which require special configuration options can be listed in
# host statements.   If no address is specified, the address will be
# allocated dynamically (if possible), but the host-specific information
# will still come from the host declaration.

#host passacaglia {
#  hardware ethernet 0:0:c0:5d:bd:95;
#  filename "vmunix.passacaglia";
#  server-name "toccata.fugue.com";
#}

# Fixed IP addresses can also be specified for hosts.   These addresses
# should not also be listed as being available for dynamic assignment.
# Hosts for which fixed IP addresses have been specified can boot using
# BOOTP or DHCP.   Hosts for which no fixed address is specified can only
# be booted with DHCP, unless there is an address range on the subnet
# to which a BOOTP client is connected which has the dynamic-bootp flag
# set.

#host fantasia {
#  hardware ethernet 08:00:07:26:c0:a5;
#  fixed-address fantasia.fugue.com;
#}

# You can declare a class of clients and then do address allocation
# based on that.   The example below shows a case where all clients
# in a certain class get addresses on the 10.17.224/24 subnet, and all
# other clients get addresses on the 10.0.29/24 subnet.

#class "foo" {
#  match if substring (option vendor-class-identifier, 0, 4) = "SUNW";
#}

#shared-network 224-29 {
#  subnet 10.17.224.0 netmask 255.255.255.0 {
#    option routers rtr-224.example.org;
#  }
#  subnet 10.0.29.0 netmask 255.255.255.0 {
#    option routers rtr-29.example.org;
#  }
#  pool {
#    allow members of "foo";
#    range 10.17.224.10 10.17.224.250;
#  }
#  pool {
#    deny members of "foo";
#    range 10.0.29.10 10.0.29.230;
#  }
#}
#

#on commit {
###    set ClientIP = binary-to-ascii(10, 8, ".", leased-address);
 #   set ClientMac = binary-to-ascii(16, 8, ":", substring(hardware, 1, 6));
 #   execute("/usr/sbin/test.py", "commit", ClientIP, ClientMac);
#}

#suffix (data-expr, length) : get last char(length(bytes)) of data-expr.
#substring (data-expr, offset, length) : offset : start bytes. length: total length(bytes) you want.
#binary-to-ascii (numeric-expr1, numeric-expr2, data-expr1, data-expr2) : hex or binary , length(bits), seprate chgar, text
#

#Client IP will contain other chars.

on commit {
	if exists dhcp6.ia-pd and exists dhcp6.ia-na {
		set ClientIPbin = substring(option dhcp6.ia-na, 16, 16);
		set ClientIP = binary-to-ascii(16, 16, ":", ClientIPbin);

		set PDPrefix = binary-to-ascii(10, 1, "", substring(option dhcp6.ia-pd, 28, 1));

		set ClientPDbin =suffix(option dhcp6.ia-pd,16);
		set ClientPD = binary-to-ascii(16, 16, ":", ClientPDbin);
		execute("/data/PD_Route.sh", "commit", ClientIP, ClientPD, PDPrefix);

	} else {
		log(info, concat("On commit: ","[PD route add] PD is not exist! no action."));
	}
}

on expiry {
	if exists dhcp6.ia-pd and exists dhcp6.ia-na {
		set ClientIPbin = substring(option dhcp6.ia-na, 16, 16);
		set ClientIP = binary-to-ascii(16, 16, ":", ClientIPbin);
		set ClientPD = binary-to-ascii(16, 16, ":", option dhcp6.ia-pd);
		execute("/data/PD_Route.sh", "expiry", ClientIP, ClientPD);
	} else {
		log(info, concat("On expiry: ","[PD route add] PD is not exist! no action."));
	}
}
on release {
	if exists dhcp6.ia-pd and exists dhcp6.ia-na {
		set ClientIPbin = substring(option dhcp6.ia-na, 16, 16);
		set ClientIP = binary-to-ascii(16, 16, ":", ClientIPbin);
		set ClientPD = binary-to-ascii(16, 16, ":", option dhcp6.ia-pd);
		execute("/data/PD_Route.sh", "release", ClientIP, ClientPD);
	} else {
		log(info, concat("On release: ","[PD route add] PD is not exist! no action."));
	}
}

#on commit { log(info, concat("global commit: ", binary-to-ascii(16, 16, ":", option dhcp6.ia-na))); }
#on commit { log(info, concat("global commit: ", option dhcp6.client-id)); }
#on expiry { log(info, concat("global expiry: ", option dhcp6.client-id)); }
#on release { log(info, concat("global release: ", option dhcp6.client-id)); }


#example
subnet6 2001:470:eeac:9999::/65 {
        range6 2001:470:eeac:9999::101 2001:470:eeac:9999::100:254;
        range6 2001:470:eeac:9999::/65 temporary;

        option dhcp6.name-servers 2001:4860:4860::8888;
        option dhcp6.domain-search "domain.example";
	#bit 65 = 0  -> 0000~7fff for IANA,  8000~ffff for PD used   (bit 65 =1 , 65 ~ 68  -> 8: 1000  ~ f: 1111 ), so currently allow 8 DUTs (/68).
        prefix6 2001:470:eeac:9999:8000:: 2001:470:eeac:9999:f000:: /68;
        # Example for a fixed host address
        #host thread_pi {
        #	#hardware ethernet d8:3a:dd:32:cd:8b;
    	#	host-identifier option dhcp6.client-id 00:04:75:a8:89:a0:77:78:96:62:f6:e6:b0:9f:2e:c4:20:21;
        #	fixed-address6 2001:470:eeac:0::2;
    	#} 
} 

subnet6 2001:470:eeac::/64 {
  range6 2001:470:eeac::101 2001:470:eeac::100:254;
  range6 2001:470:eeac::/64 temporary;
  option dhcp6.name-servers 2001:4860:4860::8888;
  option dhcp6.domain-search "domain.example";
  prefix6 2001:470:eeac:6666:: 2001:470:eeac:7777:: /64;
}

